v2 <- df2$name
levels(v1)
levels(v2)
v1
v2
df1 <-  storms%>%
filter(name %in% c("Caroline", "Doris")) %>%
select(c(name, status, year, category)) %>%
droplevels()
df2 <-  storms%>%
filter(name %in% c("Anita", "David")) %>%
select(c(name, status, year, category)) %>%
droplevels()
v1 <- df1$name
v2 <- df2$name
levels(v1)
levels(v2)
v1
v2
v1 <- df1$name %>% mutate(storms = fct_drop(storms))
df1 <-  storms%>%
filter(name %in% c("Caroline", "Doris")) %>%
select(c(name, status, year, category)) %>%
droplevels()
df2 <-  storms%>%
filter(name %in% c("Anita", "David")) %>%
select(c(name, status, year, category)) %>%
droplevels()
v1
v1 <- df1$name %>% mutate(storms = fct_drop(df1$name))
factor(df1$name)
df1$name<- fct_drop(df1$name)
factor(df1$name)
df1 <-  storms%>%
filter(name %in% c("Caroline", "Doris")) %>%
select(c(name, status, year, category)) %>%
droplevels()
df2 <-  storms%>%
filter(name %in% c("Anita", "David")) %>%
select(c(name, status, year, category)) %>%
droplevels()
factor(df1$name)
df1$name<- fct_drop(df1$name)
factor(df1$name)
v1 <- df1$name %>% mutate(storms = fct_drop(df1$name))
v1 <- df1$name
v2 <- df2$name
levels(v1)
levels(v2)
v1
df1 <-  storms%>%
filter(name %in% c("Caroline", "Doris")) %>%
select(c(name, status, year, category)) %>%
droplevels()
df2 <-  storms%>%
filter(name %in% c("Anita", "David")) %>%
select(c(name, status, year, category)) %>%
droplevels()
factor(df1$name)
df1$name<- fct_drop(df1$name)
factor(df1$name)
v1 <- df1$name
v2 <- df2$name
levels(v1)
levels(v2)
v1
v2
v2
v1
data.frame(v1,v2)
full_join(v1,v2)
DSCI523_list <- list("Instructor" = "Jenny","TF" = "Shaun", "TA" = list("Aaron", "Moahmed"))
# answer goes here
DSCI523_list$TF
DSCI523_list['TF']
DSCI523_list['TF']
DSCI523_list['TF']
DSCI523_list[['TF]]
DSCI523_list[['TF']]
DSCI523_list[[2]]
DSCI523_list$TF
DSCI523_list['TF']
DSCI523_list[[2]]
DSCI523_list
Aaron_DSCI<- DSCI523_list[[3]][1]
Aaron_DSCI
Aaron_DSCI<- DSCI523_list[[3][1]]
Aaron_DSCI<- DSCI523_list[[3]][[1]]
Aaron_DSCI
Aaron_DSCI<- DSCI523_list$TA
Aaron_DSCI
Aaron_DSCI<- DSCI523_list$TA[[1]]
Aaron_DSCI
derby_winners <- c("Orb",                           ## statement 1
"Macbeth II",
"Vagrant",
"Tomy Lee",
"Burgoo King",
"Citation",
"Lord Murphy",
"His Eminence",
"Count Turf",
"Dust Commander")
derby_list <- stringr::str_split(derby_winners, " ") ## statement 2
str(derby_list)                                      ## statement 3
derby_list %>% purrr::map_int(length)                ## statement 4
str(derby_list)                                      ## statement 3
?str
derby_list%>%str_replace(pattern = " ", replacement = "_")
derby_list%>%str_replace(pattern = "", replacement = "_")
derby_list%>%str_replace(pattern = " ", replacement = "_")
derby_list <- stringr::str_split(derby_winners, " ") ## statement 2
(derby_list <- stringr::str_split(derby_winners, " ")) ## statement 2
derby_list2<-derby_list%>%str_replace(pattern = " ", replacement = "_")
(derby_list2<-derby_list%>%str_replace(pattern = " ", replacement = "_"))
derby_list %>% purrr::map_int(length)                ## statement 4
(derby_list2<-derby_list%>%str_replace(pattern = " ", replacement = "_"))
(derby_list2<-derby_list%>%str_replace(string = " ", replacement = "_"))
(derby_list2<-derby_list%>%str_replace(string = " ", replacement = "_"))
(derby_list%>%str_replace(string = " ", replacement = "_"))
# answer goes here
map_chr(derby_list, ~paste(.x, collapse = "_"))
# answer goes here
map_chr(derby_list, ~paste(.x, collapse = "_"))
fct_c(v1,v2)
forcats::fct_c(v1,v2)
knitr::opts_chunk$set(error = TRUE, collapse = TRUE, comment = "#>")
library(tidyverse)
library(forcats)
storms <- storms %>%
mutate(name = as_factor(name),
status = as_factor(
status,
levels = c("tropical depression", "tropical storm", "hurricane")
)
)
## answer
hurricane_summary <- storms %>%
filter(status == "hurricane", year > 2005) %>%
group_by(name) %>%
summarise(
max_wind = max(wind, na.rm = TRUE),
n = n()
)
ggplot(hurricane_summary, aes(max_wind, name)) + geom_point()
## answer
hurricane_07 <- storms %>%
filter(status == "hurricane", year == 2007) %>%
select(name, category) %>%
droplevels()
desc <- tribble(
~ category,                   ~ damage,
1L,               "some damage",
2L,          "extensive damage",
3L,        "devastating damage",
4L,       "catastrophic damage",
5L, "worst catastrophic damage"
)
desc<- desc %>%
mutate(category =
factor(category, levels = unique(category), ordered = TRUE)
)
hurricane_07
desc
new_frame<- left_join(hurricane_07, desc, by = 'category')
new_frame
df1 <-  storms%>%
filter(name %in% c("Caroline", "Doris")) %>%
select(c(name, status, year, category)) %>%
droplevels()
df2 <-  storms%>%
filter(name %in% c("Anita", "David")) %>%
select(c(name, status, year, category)) %>%
droplevels()
v1 <- df1$name
v2 <- df2$name
levels(v1)
levels(v2)
forcats::fct_c(v1,v2)
# answer goes
bind_rows(df1, df2)
rbind(df1, df2)
DSCI523_list <- list("Instructor" = "Jenny","TF" = "Shaun", "TA" = list("Aaron", "Moahmed"))
# answer goes here
DSCI523_list$TF
DSCI523_list['TF']
DSCI523_list[[2]]
# answer goes here
DSCI523_list
Aaron_DSCI<- DSCI523_list$TA[[1]]
Aaron_DSCI
derby_winners <- c("Orb",                           ## statement 1
"Macbeth II",
"Vagrant",
"Tomy Lee",
"Burgoo King",
"Citation",
"Lord Murphy",
"His Eminence",
"Count Turf",
"Dust Commander")
(derby_list <- stringr::str_split(derby_winners, " ")) ## statement 2
?str
str(derby_list)                                      ## statement 3
derby_list %>% purrr::map_int(length)                ## statement 4
# answer goes here
map_chr(derby_list, ~paste(.x, collapse = "_"))
levels(v1)
levels(v)
v<-forcats::fct_c(v1,v2)
levels(v)
(df1 <-  storms%>%
filter(name %in% c("Caroline", "Doris")) %>%
select(c(name, status, year, category)) %>%
droplevels())
(df2 <-  storms%>%
filter(name %in% c("Anita", "David")) %>%
select(c(name, status, year, category)) %>%
droplevels())
v1 <- df1$name
(v1 <- df1$name)
(v2 <- df2$name)
levels(v1)
levels(v2)
v<-forcats::fct_c(v1,v2)
levels(v)
levels(v)
bind_rows(df1, df2)
rbind(df1, df2)
class(rbind(df1, df2))
factors(rbind(df1, df2))
factor(rbind(df1, df2))
str_glue(derby_list, .sep = " ")
derby_winners <- c("Orb",                           ## statement 1
"Macbeth II",
"Vagrant",
"Tomy Lee",
"Burgoo King",
"Citation",
"Lord Murphy",
"His Eminence",
"Count Turf",
"Dust Commander")
str_glue(derby_list, .sep = " ")
(derby_list <- stringr::str_split(derby_winners, sep=" ")) ## statement 2
str_glue(derby_list, .sep = " ")
str_glue(derby_list,sep = " ")
str(derby_list)                              ## statement 3
derby_list %>% purrr::map_int(length)                ## statement 4
derby_list %>% purrr::map_char(length)                ## statement 4
derby_list %>% purrr::map_int(length)                ## statement 4
rbind(df1, df2)
bind_rows(df1, df2)
## answer
storms<- storms$>$ filter(status=='hurricane') %>% droplevels()
## answer
storms<- storms%>% filter(status=='hurricane') %>% droplevels()
levels(storms)
#TODO
gapminder
clear
clear()
exit
wipe
knitr::opts_chunk$set(error = TRUE, collapse = TRUE, comment = "#>", eval = FALSE)
library(tidyverse)
library(stringr)
library(gapminder)
library(nycflights13)
lubridate::ymd('July 1, 1867')
lubridate::make_date('July 1,1867')
library(lubridate)
date<- make_date('July 1,1867')
date
date<- ymd('July 1,1867')
date
date
?lubridate
?ymd
date<- ymd(string)
date
string<-July 1, 1867
date<- ymd(string)
date<- mdy(string)
date
string<-'July 1, 1867'
date<- mdy(string)
date
date
library(gapminder)
gapminder
knitr::opts_chunk$set(echo = TRUE)
gapminder
new_gap <- gapminder %>% filter(year = c('2002','2007'))
gapminder
new_gap <- gapminder %>% filter(year = c('2002','2007'))
library(magrittr)
gapminder
new_gap <- gapminder %>% filter(year = c('2002','2007'))
new_gap <- gapminder %>% filter(year = 2002)
new_gap <- gapminder %>% filter(year = '2002')
new_gap <- gapminder %>% filter(year == '2002')
gapminder
new_gap <- gapminder %>% filter(year == '2002')
new_gap <- gapminder %>% filter('year' == '2002')
new_gap
new_gap <- gapminder %>% filter(year == '2002')
new_gap <- gapminder %>% filter(year = '2002')
new_gap <- gapminder %>% filter(year = 2007)
new_gap <- gapminder %>% select(continent, country, year)
library(tidyverse)
gapminder
new_gap <- gapminder %>% select(continent, country, year)
new_gap <- gapminder %>% select(continent, country, year)
new_gap <- gapminder %>% select(continent, country, year) %>% filter(year=c('2002','2007'))
new_gap <- gapminder %>% select(continent, country, year) %>% filter(year==c('2002','2007'))
new_gap
new_gap <- gapminder %>% select(continent, country, year, pop, gdpPercap) %>% filter(year==c('2002','2007'))
new_gap
ggplot(new_gap, aes(x=continent, y= pop))+ geom_bar()
ggplot(new_gap, aes(x=continent))+ geom_bar()
ggplot(new_gap, aes(x=country, y = pop))+ geom_point()
ggplot(new_gap, aes(x=country, y = gdpPercap))+ geom_point()
ggplot(new_gap, aes(x=country, y = gdpPercap))+ geom_point()
ggplot(new_gap, aes(x=country, y = gdpPercap), colour = country)+ geom_point()
ggplot(new_gap, aes(x=country, y = gdpPercap), colour = continent)+ geom_point()
ggplot(new_gap, aes(x=country, y = gdpPercap), color = continent)+ geom_point()
ggplot(new_gap, aes(x=country, y = gdpPercap))+ geom_point(color = continent)
ggplot(new_gap, aes(x=country, y = gdpPercap))+ geom_point(color = 'continent')
new_gap <- gapminder %>% select(continent, country, year, pop, gdpPercap, lifeExp) %>% filter(year==c('2002','2007'))
new_gap
ggplot(new_gap, aes(country, lifeExp)) + geom_point(aes(group = continent, color = continent))
ggplot(new_gap, aes(continent, lifeExp)) + geom_point(aes(group = continent, color = continent))
ggplot(new_gap, aes(country, lifeExp)) + geom_point(aes(group = continent, color = continent))
ggplot(new_gap, aes(continent, lifeExp)) + geom_point(aes(group = continent, color = continent))
new_gap <- gapminder %>% select(continent, country, year, pop, gdpPercap, lifeExp) %>% filter(year==c('2007'))
new_gap
ggplot(new_gap, aes(continent, lifeExp)) + geom_point(aes(group = continent, color = continent))
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
con = dbConnect(SQLite(), 'cinema2.db')
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
library(RSQLite)
my_con = dbConnect(SQLite(), "drinks.db")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
library(RSQLite)
my_con = dbConnect(SQLite(), "drinks.db")
mh_data<- read.csv("../data/cleaned_data")
setwd("~/Documents/DSCI-532/DSCI-532_Linyang-Alex/MHealth-Visualization")
mh_data<- read.csv("../data/cleaned_data")
mh_data<- read.csv("../data/cleaned_data.csv")
shiny::runApp()
runApp()
runApp()
runApp()
mh_data<- read.csv("../data/cleaned_data.csv")
mh_data
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Attitudes of Mental Health in Tech"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("ageInput",
"Select your age range of interest",
min = 5,
max = 100,
value = c(20,40)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
mh_filtered<- reactive({
mh_data %>%
filter(Age > input$ageInput[1],
Age < input$ageInput[2])
})
output$distPlot <- renderPlot({
mh_filtered() %>%
ggplot(aes(continent)) + geom_histogram()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
mh_filtered<- reactive({
mh_data %>%
filter(Age > input$ageInput[1],
Age < input$ageInput[2])
})
output$distPlot <- renderPlot({
mh_filtered() %>%
ggplot(aes(continent)) + geom_histogram()
})
output$mh_data <- renderTable({
mh_filtered()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Attitudes of Mental Health in Tech"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("ageInput",
"Select your age range of interest",
min = 5,
max = 100,
value = c(20,40)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
mh_filtered<- reactive({
mh_data %>%
filter(Age > input$ageInput[1],
Age < input$ageInput[2])
})
output$distPlot <- renderPlot({
mh_filtered() %>%
ggplot(aes(continent)) + geom_histogram()
})
output$mh_data <- renderTable({
mh_filtered()
})
}
runApp()
runApp()
runApp()
runApp()
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Attitudes of Mental Health in Tech"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("ageInput",
"Select your age range of interest",
min = 5,
max = 100,
value = c(20,40)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot"),
tableOutput("mh_data")
)
)
)
)
runApp()
runApp()
setwd("~/Documents/DSCI-532/DSCI-532_Linyang-Alex/MHealth-Visualization")
runApp()
mh_data <- read.csv("../data/cleaned_data.csv")
mh_data
runApp()
runApp()
runApp()
library(tidyverse)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mh_data
mh_data <- read.csv("../data/cleaned_data.csv")
mh_data
runApp()
runApp()
View(mh_data)
runApp()
View(mental_data)
mental_data <- read.csv("../data/cleaned_data.csv", stringsAsFactors = FALSE) %>%
select("Age":"phys_health_interview_score")
View(mental_data)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(leaflet)
install.packages(leaflet)
install.packages("leaflet")
library(leaflet)
runApp()
install.packages("geojsonio")
install.packages("geojsonio")
library(geojsonio)
shiny::runApp()
